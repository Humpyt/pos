'use client'

import { useState, useEffect } from 'react'
import {
  Search,
  ShoppingCart,
  Plus,
  Minus,
  X,
  Package,
  User,
  CreditCard,
  DollarSign,
  Smartphone,
  Building2,
  Percent,
  Receipt
} from 'lucide-react'
import { PageHeader, StatusBadge, EmptyState, LoadingState, ActionCard } from '@/components/shared/DesignSystem'
import { formatCurrency, generateSaleNumber } from '@/lib/utils'

interface Product {
  id: string
  name: string
  sku: string
  price: number
  stock: number
  category: string
  barcode?: string
}

interface CartItem {
  product: Product
  quantity: number
  totalPrice: number
}

interface Customer {
  id: string
  name: string
  email?: string
  phone?: string
  customerType: string
}

export default function POSPage() {
  const [products, setProducts] = useState<Product[]>([])
  const [cart, setCart] = useState<CartItem[]>([])
  const [searchTerm, setSearchTerm] = useState('')
  const [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(null)
  const [discount, setDiscount] = useState(0)
  const [paymentMethod, setPaymentMethod] = useState('CASH')
  const [isLoading, setIsLoading] = useState(true)

  useEffect(() => {
    // Simulate fetching products
    setTimeout(() => {
      setProducts([
        {
          id: '1',
          name: 'Coca-Cola 1L',
          sku: 'COC-COLA-1L',
          price: 4500, // ~UGX 4,500
          stock: 45,
          category: 'Beverages',
          barcode: '5449000000996'
        },
        {
          id: '2',
          name: 'Coca-Cola 500ml',
          sku: 'COC-COLA-500',
          price: 2500, // ~UGX 2,500
          stock: 8,
          category: 'Beverages',
          barcode: '5449000049185'
        },
        {
          id: '3',
          name: 'Fanta Orange 1L',
          sku: 'FAN-ORNG-1L',
          price: 4200, // ~UGX 4,200
          stock: 67,
          category: 'Beverages',
          barcode: '5449000001008'
        },
        {
          id: '4',
          name: 'Aquafina Water 1L',
          sku: 'AQV-FINA-1L',
          price: 2000, // ~UGX 2,000
          stock: 120,
          category: 'Water',
          barcode: '5449000001053'
        },
        {
          id: '5',
          name: 'Mountain Dew Extreme 500ml',
          sku: 'MTV-EXCT-500',
          price: 3500, // ~UGX 3,500
          stock: 3,
          category: 'Energy Drinks',
          barcode: '5449000132521'
        },
        {
          id: '6',
          name: 'Fresh Apple Juice 1L',
          sku: 'JUS-APPL-1L',
          price: 5500, // ~UGX 5,500
          stock: 25,
          category: 'Juices',
          barcode: '5449000014141'
        }
      ])
      setIsLoading(false)
    }, 500)
  }, [])

  const filteredProducts = products.filter(product =>
    product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    product.sku.toLowerCase().includes(searchTerm.toLowerCase()) ||
    (product.barcode && product.barcode.includes(searchTerm))
  )

  const addToCart = (product: Product) => {
    setCart(prevCart => {
      const existingItem = prevCart.find(item => item.product.id === product.id)

      if (existingItem) {
        if (existingItem.quantity >= product.stock) {
          return prevCart // Don't add more than available stock
        }
        return prevCart.map(item =>
          item.product.id === product.id
            ? { ...item, quantity: item.quantity + 1, totalPrice: (item.quantity + 1) * product.price }
            : item
        )
      } else {
        return [...prevCart, { product, quantity: 1, totalPrice: product.price }]
      }
    })
  }

  const updateQuantity = (productId: string, newQuantity: number) => {
    if (newQuantity < 1) return

    setCart(prevCart =>
      prevCart.map(item =>
        item.product.id === productId
          ? {
              ...item,
              quantity: Math.min(newQuantity, item.product.stock),
              totalPrice: Math.min(newQuantity, item.product.stock) * item.product.price
            }
          : item
      )
    )
  }

  const removeFromCart = (productId: string) => {
    setCart(prevCart => prevCart.filter(item => item.product.id !== productId))
  }

  const subtotal = cart.reduce((sum, item) => sum + item.totalPrice, 0)
  const discountAmount = subtotal * (discount / 100)
  const taxAmount = (subtotal - discountAmount) * 0.16
  const total = subtotal - discountAmount + taxAmount

  const handleCheckout = () => {
    if (cart.length === 0) return

    const saleData = {
      saleNumber: generateSaleNumber(),
      items: cart,
      subtotal,
      discount: discountAmount,
      tax: taxAmount,
      total,
      paymentMethod,
      customer: selectedCustomer
    }

    console.log('Processing sale:', saleData)
    alert(`Sale completed successfully!\nTotal: ${formatCurrency(total)}`)

    // Reset cart
    setCart([])
    setDiscount(0)
    setPaymentMethod('CASH')
    setSelectedCustomer(null)
  }

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <LoadingState />
      </div>
    )
  }

  return (
    <div className="space-y-6 h-[calc(100vh-12rem)]">
      <PageHeader
        title="Point of Sale"
        subtitle="Select products and complete sales transactions"
      />

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Products Section */}
        <div className="lg:col-span-2 space-y-4">
          {/* Search */}
          <div className="bg-card rounded-xl border border-border p-6">
            <h2 className="text-lg font-semibold text-primary mb-4 flex items-center">
              <Package className="h-5 w-5 mr-2" />
              Products
            </h2>
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted h-4 w-4" />
              <input
                type="text"
                placeholder="Search by product name, SKU, or scan barcode..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-2 input rounded-lg border border-input-border focus:border-primary focus:ring-2 focus:ring-primary"
                autoFocus
              />
            </div>
          </div>

        {/* Products Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 overflow-y-auto">
          {filteredProducts.map((product) => (
            <div
              key={product.id}
              className={`bg-card rounded-xl border border-border p-4 cursor-pointer transition-all hover:shadow-md hover:border-primary ${
                cart.find(item => item.product.id === product.id) ? 'ring-2 ring-primary border-primary' : ''
              }`}
              onClick={() => addToCart(product)}
            >
              <div className="flex justify-between items-start mb-3">
                <div className="flex-1">
                  <h3 className="font-medium text-sm text-primary mb-1">{product.name}</h3>
                  <p className="text-xs text-muted">{product.sku}</p>
                </div>
                <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                  product.stock <= 5
                    ? 'bg-red-100 text-red-800'
                    : 'bg-emerald-100 text-emerald-800'
                }`}>
                  {product.stock}
                </span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-lg font-bold text-primary">
                  {formatCurrency(product.price)}
                </span>
                <button
                  onClick={(e) => {
                    e.stopPropagation()
                    addToCart(product)
                  }}
                  className="p-2 bg-primary text-white rounded-lg hover:bg-primary/90 transition-colors"
                >
                  <Plus className="h-4 w-4" />
                </button>
              </div>
              {product.stock <= 5 && (
                <div className="mt-2">
                  <StatusBadge status="warning">
                    Low Stock
                  </StatusBadge>
                </div>
              )}
            </div>
          ))}
        </div>

        {filteredProducts.length === 0 && (
          <div className="bg-card rounded-xl border border-border p-8">
            <EmptyState
              icon={Package}
              title="No products found"
              description="Try adjusting your search terms or browse all products"
            />
          </div>
        )}
      </div>

      {/* Cart Section */}
      <div className="space-y-4">
        {/* Customer Selection */}
        <div className="bg-card rounded-xl border border-border p-6">
          <h2 className="text-lg font-semibold text-primary mb-4 flex items-center">
            <User className="h-5 w-5 mr-2" />
            Customer
          </h2>
          <button
            className="w-full text-left px-4 py-3 bg-surface border border-border rounded-lg hover:border-primary transition-colors flex items-center"
            onClick={() => {
              const customerName = prompt('Enter customer name:')
              if (customerName) {
                setSelectedCustomer({
                  id: '1',
                  name: customerName,
                  customerType: 'WALK_IN'
                })
              }
            }}
          >
            {selectedCustomer ? (
              <span className="text-primary">{selectedCustomer.name}</span>
            ) : (
              <>
                <User className="h-4 w-4 mr-2 text-muted" />
                <span className="text-muted">Add Customer</span>
              </>
            )}
          </button>
        </div>

        {/* Cart Items */}
        <div className="bg-card rounded-xl border border-border p-6">
          <h2 className="text-lg font-semibold text-primary mb-4 flex items-center">
            <ShoppingCart className="h-5 w-5 mr-2" />
            Cart ({cart.reduce((sum, item) => sum + item.quantity, 0)} items)
          </h2>
          <div className="space-y-3 max-h-64 overflow-y-auto">
            {cart.map((item) => (
              <div key={item.product.id} className="flex items-center justify-between p-3 bg-surface rounded-lg">
                <div className="flex-1">
                  <h4 className="font-medium text-sm text-primary">{item.product.name}</h4>
                  <p className="text-xs text-muted">{formatCurrency(item.product.price)} each</p>
                </div>
                <div className="flex items-center space-x-2">
                  <button
                    className="p-1 bg-card border border-border rounded hover:bg-surface transition-colors"
                    onClick={() => updateQuantity(item.product.id, item.quantity - 1)}
                  >
                    <Minus className="h-3 w-3 text-secondary" />
                  </button>
                  <span className="w-8 text-center text-sm font-medium text-primary">{item.quantity}</span>
                  <button
                    className="p-1 bg-card border border-border rounded hover:bg-surface transition-colors"
                    onClick={() => updateQuantity(item.product.id, item.quantity + 1)}
                    disabled={item.quantity >= item.product.stock}
                  >
                    <Plus className="h-3 w-3 text-secondary" />
                  </button>
                  <button
                    className="p-1 hover:bg-red-50 rounded transition-colors"
                    onClick={() => removeFromCart(item.product.id)}
                  >
                    <X className="h-3 w-3 text-red-600" />
                  </button>
                </div>
              </div>
            ))}

            {cart.length === 0 && (
              <div className="text-center py-8">
                <ShoppingCart className="h-8 w-8 text-muted mx-auto mb-2" />
                <p className="text-sm text-muted">Cart is empty</p>
              </div>
            )}
          </div>
        </div>

        {/* Order Summary */}
        <div className="bg-card rounded-xl border border-border p-6">
          <h3 className="text-lg font-semibold text-primary mb-4">Order Summary</h3>
          <div className="space-y-3">
            <div className="flex justify-between text-sm">
              <span className="text-secondary">Subtotal:</span>
              <span className="text-primary">{formatCurrency(subtotal)}</span>
            </div>

            <div className="flex items-center space-x-2">
              <Percent className="h-4 w-4 text-muted" />
              <input
                type="number"
                placeholder="Discount %"
                value={discount}
                onChange={(e) => setDiscount(parseFloat(e.target.value) || 0)}
                className="flex-1 px-3 py-2 input rounded-lg border border-input-border focus:border-primary focus:ring-2 focus:ring-primary text-sm"
                min="0"
                max="100"
              />
            </div>

            {discount > 0 && (
              <div className="flex justify-between text-sm text-emerald-600">
                <span>Discount:</span>
                <span>-{formatCurrency(discountAmount)}</span>
              </div>
            )}

            <div className="flex justify-between text-sm">
              <span className="text-secondary">Tax (16%):</span>
              <span className="text-primary">{formatCurrency(taxAmount)}</span>
            </div>

            <div className="border-t border-border pt-3">
              <div className="flex justify-between font-bold text-lg">
                <span className="text-primary">Total:</span>
                <span className="text-primary">{formatCurrency(total)}</span>
              </div>
            </div>
          </div>
        </div>

        {/* Payment Method */}
        <div className="bg-card rounded-xl border border-border p-6">
          <h3 className="text-lg font-semibold text-primary mb-4">Payment Method</h3>
          <div className="grid grid-cols-2 gap-2">
            {[
              { id: 'CASH', icon: DollarSign, label: 'Cash' },
              { id: 'CARD', icon: CreditCard, label: 'Card' },
              { id: 'MOBILE_MONEY', icon: Smartphone, label: 'Mobile' },
              { id: 'BANK_TRANSFER', icon: Building2, label: 'Bank' }
            ].map((method) => (
              <button
                key={method.id}
                onClick={() => setPaymentMethod(method.id)}
                className={`flex flex-col items-center p-3 rounded-lg border transition-all ${
                  paymentMethod === method.id
                    ? 'bg-primary text-primary-foreground border-primary'
                    : 'bg-card border-border text-secondary hover:bg-surface hover:border-primary'
                }`}
              >
                <method.icon className="h-5 w-5 mb-1" />
                <span className="text-xs font-medium">{method.label}</span>
              </button>
            ))}
          </div>
        </div>

        {/* Checkout Button */}
        <button
          onClick={handleCheckout}
          disabled={cart.length === 0}
          className={`w-full h-14 text-lg font-semibold rounded-xl transition-all flex items-center justify-center ${
            cart.length === 0
              ? 'bg-muted text-muted-foreground cursor-not-allowed'
              : 'bg-primary text-primary-foreground hover:bg-primary/90 shadow-lg hover:shadow-xl'
          }`}
        >
          <Receipt className="h-5 w-5 mr-2" />
          Complete Sale
          {cart.length > 0 && (
            <span className="ml-auto font-bold">
              {formatCurrency(total)}
            </span>
          )}
        </button>
      </div>
    </div>
  )
}